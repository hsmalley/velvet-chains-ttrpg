---
# üè¥‚Äç‚ò†Ô∏è Velvet Chains Pre-Commit Corsair Guard Configuration
# Ensures all code meets theatrical excellence before entering sacred git history
repos:
  # üêç Python Choreographer Quality Assurance
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.14.0
    hooks:
      # Format Python with corsair precision
      - id: ruff-format
        name: üé≠ Format Python with velvet precision
        files: ^voidlight_.*\.py$
      # Lint Python to dominatrix standards
      - id: ruff
        name: üîç Submit Python to linting dominatrix
        args: [--fix, --unsafe-fixes]
        files: ^voidlight_.*\.py$
  # ü¶Ä Rust Engine Quality Forging
  - repo: local
    hooks:
      # Ensure Rust compiles without errors
      - id: rust-check
        name: ‚öîÔ∏è Forge Rust engine without flaws
        entry: cargo
        args: [check, --manifest-path, voidlight_engine/Cargo.toml]
        language: system
        files: ^voidlight_engine/.*\.rs$
        pass_filenames: false
      # Format Rust to aesthetic perfection
      - id: rust-fmt
        name: üíé Polish Rust to mirror finish
        entry: cargo
        args: [fmt, --manifest-path, voidlight_engine/Cargo.toml, --check]
        language: system
        files: ^voidlight_engine/.*\.rs$
        pass_filenames: false
      # Submit to clippy's merciless judgment
      - id: rust-clippy
        name: üî® Submit engine to clippy dominatrix
        entry: cargo
        args:
          - clippy
          - --manifest-path
          - voidlight_engine/Cargo.toml
          - --all-targets
          - --
          - -D
          - warnings
        language: system
        files: ^voidlight_engine/.*\.rs$
        pass_filenames: false
  # üìù General Code Quality Rituals
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      # Ensure files end with corsair elegance
      - id: end-of-file-fixer
        name: üéØ Ensure files end with proper flourish
        exclude: ^\.github/.*\.md$
      # Trim trailing whitespace with precision
      - id: trailing-whitespace
        name: ‚úÇÔ∏è Trim excess whitespace with velvet touch
        exclude: ^\.github/.*\.md$
      # Validate JSON configuration files
      - id: check-json
        name: üîç Validate JSON corsair configurations
      # Validate YAML configuration files
      - id: check-yaml
        name: üîç Validate YAML fleet manifests
        exclude: ^\.github/workflows/.*\.yml$ # GitHub Actions may use custom syntax
      # Prevent accidental large file commits
      - id: check-added-large-files
        name: üö´ Block oversized treasure chests
        args: [--maxkb=1024] # 1MB limit
      # Ensure shell scripts are executable
      - id: check-executables-have-shebangs
        name: üîß Ensure executable scripts have proper incantations
      # Validate Python syntax
      - id: check-ast
        name: üêç Validate Python syntax integrity
        files: ^voidlight_.*\.py$
  # üé™ Markdown Documentation Quality
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.45.0
    hooks:
      - id: markdownlint
        name: üìö Polish markdown documentation to perfection
        args: [--fix, --disable, MD013, MD022, MD032, MD031] # Allow long lines and spacing flexibility for theatrical content
        files: ^.*\.md$
        exclude: ^\.github/.*\.md$ # Skip symlinked GitHub files
  # üé® Code formatting with Prettier (JS/TS/MD/JSON/Astro)
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        name: üíÑ Format with Prettier
        additional_dependencies:
          - prettier@3.3.3
          - prettier-plugin-astro@0.14.1
        files: \.(js|jsx|ts|tsx|json|md|mdx|astro|css|scss|yaml|yml)$
        args: ["--write"]
  # üîé ESLint via Next (local hook)
  - repo: local
    hooks:
      - id: next-lint
        name: üîé ESLint (Next.js)
        entry: bash
        args:
          - -lc
          - |
            set -euo pipefail
            if [ -f package.json ] && grep -q '"next"' package.json; then
              npx next lint --max-warnings=0
            else
              echo "Skipping Next.js lint: no Next.js detected in package.json."
            fi
        language: system
        pass_filenames: false
      # TTRPG-specific ESLint run (scoped to subproject)
      - id: ttrpg-eslint
        name: üîé ESLint (TTRPG)
        entry: bash
        args:
          - -lc
          - |
            set -euo pipefail
            if [ -f package.json ] && npx --no-install eslint -v >/dev/null 2>&1; then
              if ls -1 .eslintrc.* 2>/dev/null | grep -q .; then
                npx eslint . --max-warnings=0
              else
                echo "Skipping ESLint: no ESLint config present."
              fi
            else
              echo "Skipping ESLint: eslint not installed in this project."
            fi
        language: system
        pass_filenames: false
      # TTRPG pre-push Astro type/syntax check
      - id: ttrpg-astro-check
        name: ‚ú® Astro Check (TTRPG)
        entry: bash
        args:
          - -lc
          - |
            set -euo pipefail
            if [ -f package.json ] && grep -q '"astro"' package.json; then
              npx astro check
            else
              echo "Skipping Astro check: no Astro project detected."
            fi
        language: system
        pass_filenames: false
        stages: [pre-push]
        always_run: true
# üéØ Pre-commit execution configuration
default_install_hook_types: [pre-commit, pre-push]
default_stages: [pre-commit]
# üõ°Ô∏è Safety protocols for corsair development
fail_fast: false # Run all checks even if early ones fail
minimum_pre_commit_version: 3.0.0
