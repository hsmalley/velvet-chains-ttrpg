---
import { getCollection } from 'astro:content';
const characters = await getCollection('characters');
const companions = await getCollection('companions');
const factions = await getCollection('factions');

const entries = [
  ...characters.map(c => ({ ...c.data, type: 'character', url: `/characters/${c.data.id}` })),
  ...companions.map(c => ({ ...c.data, type: 'companion', url: `/companions/${c.data.id}` })),
  ...factions.map(f => ({ ...f.data, type: 'faction', url: `/factions/${f.data.id}` }))
];

const allTags = [...new Set(entries.flatMap(e => e.tags))];
const allTypes = ['character', 'companion', 'faction'];
---

<script type="module">
  import Fuse from 'https://cdn.jsdelivr.net/npm/fuse.js@7.0.0/dist/fuse.esm.js';

  const entries = JSON.parse(document.getElementById('entry-data').textContent);
  const fuse = new Fuse(entries, {
    keys: ['name', 'tags', 'type'],
    threshold: 0.3
  });

  let searchTerm = '';
  let selectedTags = new Set();
  let selectedTypes = new Set(['character', 'companion', 'faction']);

  function updateResults() {
    const results = fuse.search(searchTerm).map(r => r.item);
    const filtered = results.filter(entry =>
      (selectedTypes.has(entry.type)) &&
      (selectedTags.size === 0 || entry.tags.some(tag => selectedTags.has(tag)))
    );

    const container = document.getElementById('results');
    container.innerHTML = '';

    const grouped = {
      character: [],
      companion: [],
      faction: []
    };

    filtered.forEach(entry => grouped[entry.type].push(entry));

    for (const type of ['character', 'companion', 'faction']) {
      if (grouped[type].length > 0) {
        const group = document.createElement('div');
        group.innerHTML = `<h3>${type.charAt(0).toUpperCase() + type.slice(1)}s</h3>`;
        const ul = document.createElement('ul');
        grouped[type].forEach(entry => {
          const li = document.createElement('li');
          li.innerHTML = `<a href="${entry.url}">${entry.name}</a> â€” ${entry.tags.join(', ')}`;
          ul.appendChild(li);
        });
        group.appendChild(ul);
        container.appendChild(group);
      }
    }
  }

  function onSearch(e) {
    searchTerm = e.target.value;
    updateResults();
  }

  function onTagToggle(tag) {
    if (selectedTags.has(tag)) {
      selectedTags.delete(tag);
    } else {
      selectedTags.add(tag);
