---
import { getCollection } from 'astro:content';
import { withBasePath } from '../utils/url';

const docs = await getCollection('docs');
const ENTRY_TYPES = ['character', 'companion', 'faction', 'adventure', 'place', 'map'] as const;

type EntryType = (typeof ENTRY_TYPES)[number];

type SearchEntry = {
  slug: string;
  entryType: EntryType;
  tags: string[];
  name: string;
  title: string;
  subtitle: string;
  url: string;
};

const describeEntry = (entry: SearchEntry, data: Record<string, unknown>) => {
  switch (entry.entryType) {
    case 'character': {
      const level = data.level as number | undefined;
      const klass = data.class as string | undefined;
      return level && klass ? `Level ${level} ${klass}` : '';
    }
    case 'companion':
      return (data.species as string | undefined) ?? '';
    case 'faction':
      return (data.alignment as string | undefined) ?? '';
    case 'adventure': {
      const level = data.recommendedLevel as string | number | undefined;
      const duration = data.duration as string | undefined;
      if (level && duration) {
        return `Level ${level} ‚Ä¢ ${duration}`;
      }
      if (level) {
        return `Level ${level}`;
      }
      return duration ?? '';
    }
    case 'place':
      return (data.location as string | undefined) ?? '';
    case 'map': {
      const scale = data.mapScale as string | undefined;
      const dimensions = data.mapDimensions as string | undefined;
      if (scale && dimensions) {
        return `${scale} ‚Ä¢ ${dimensions}`;
      }
      return scale ?? dimensions ?? '';
    }
    default:
      return '';
  }
};

const entries: SearchEntry[] = docs
  .map(({ data, slug }) => {
    const entryType = data.entryType as EntryType | undefined;

    if (!entryType || !ENTRY_TYPES.includes(entryType)) {
      return null;
    }

    const tags = Array.isArray(data.tags) ? (data.tags as string[]) : [];
    const name = (data.name as string | undefined) ?? (data.title as string | undefined) ?? slug;

    const entry: SearchEntry = {
      slug,
      entryType,
      tags,
      name,
      title: (data.title as string | undefined) ?? name,
      subtitle: '',
      url: withBasePath(`/${slug}/`),
    };

    entry.subtitle = describeEntry(entry, data as Record<string, unknown>);
    return entry;
  })
  .filter((entry): entry is SearchEntry => Boolean(entry));

const allTags = [...new Set(entries.flatMap((entry) => entry.tags))].sort((a, b) => a.localeCompare(b));
const allTypes = [...ENTRY_TYPES];
const serializedEntries = JSON.stringify(entries).replace(/</g, '\\u003c');
---

<div class="search-dashboard">
  <h2>üîç Search Dashboard</h2>
  <input type="text" id="search-input" placeholder="Search by name, tag, type..." />

  <h3>üîñ Filter by Tag</h3>
  <div id="tag-filters">
    {allTags.map((tag) => (
      <label>
        <input type="checkbox" value={tag} />
        {tag}
      </label>
    ))}
  </div>

  <h3>üß© Filter by Type</h3>
  <div id="type-filters">
    {allTypes.map((type) => (
      <label>
        <input type="checkbox" value={type} checked />
        {type}
      </label>
    ))}
  </div>

  <hr />

  <div id="results"></div>
  <div id="pagination"></div>

  <script type="application/json" id="entry-data" set:html={serializedEntries}></script>

  <script type="module">
    import Fuse from 'https://cdn.jsdelivr.net/npm/fuse.js@7.0.0/dist/fuse.esm.js';

    const ENTRY_TYPES = {JSON.stringify(allTypes)};
    const entries = JSON.parse(document.getElementById('entry-data').textContent);
    const fuse = new Fuse(entries, {
      keys: ['name', 'tags', 'entryType', 'subtitle'],
      threshold: 0.3,
    });

    let searchTerm = '';
    let selectedTags = new Set();
    let selectedTypes = new Set(ENTRY_TYPES);
    let currentPage = 1;
    const pageSize = 10;

    const input = document.getElementById('search-input');
    const tagFilters = document.getElementById('tag-filters');
    const typeFilters = document.getElementById('type-filters');
    const resultsContainer = document.getElementById('results');
    const paginationContainer = document.getElementById('pagination');

    input.addEventListener('input', (e) => {
      searchTerm = e.target.value;
      currentPage = 1;
      updateResults();
    });

    tagFilters.querySelectorAll('input').forEach((input) => {
      input.addEventListener('change', () => {
        input.checked ? selectedTags.add(input.value) : selectedTags.delete(input.value);
        currentPage = 1;
        updateResults();
      });
    });

    typeFilters.querySelectorAll('input').forEach((input) => {
      input.addEventListener('change', () => {
        input.checked ? selectedTypes.add(input.value) : selectedTypes.delete(input.value);
        currentPage = 1;
        updateResults();
      });
    });

    function updateResults() {
      const results = fuse.search(searchTerm).map((r) => r.item);
      const filtered = results.filter(
        (entry) =>
          selectedTypes.has(entry.entryType) &&
          (selectedTags.size === 0 || entry.tags.some((tag) => selectedTags.has(tag)))
      );

      const grouped = ENTRY_TYPES.reduce((acc, type) => {
        acc[type] = [];
        return acc;
      }, {});

      filtered.forEach((entry) => {
        grouped[entry.entryType].push(entry);
      });

      resultsContainer.innerHTML = '';

      ENTRY_TYPES.forEach((type) => {
        const groupEntries = grouped[type];
        if (groupEntries.length === 0) return;

        const groupDiv = document.createElement('div');
        const heading = document.createElement('h3');
        heading.textContent = type.charAt(0).toUpperCase() + type.slice(1) + 's';
        groupDiv.appendChild(heading);

        const ul = document.createElement('ul');
        const start = (currentPage - 1) * pageSize;
        const end = start + pageSize;

        groupEntries.slice(start, end).forEach((entry) => {
          const li = document.createElement('li');
          const subtitleText = entry.subtitle ? ` ‚Äî ${entry.subtitle}` : '';
          const tagText = entry.tags.length ? ` <span class="tags">(${entry.tags.join(', ')})</span>` : '';
          li.innerHTML = `<a href="${entry.url}">${entry.name}</a>${subtitleText}${tagText}`;
          ul.appendChild(li);
        });

        groupDiv.appendChild(ul);
        resultsContainer.appendChild(groupDiv);
      });

      paginationContainer.innerHTML = '';
      const prevBtn = document.createElement('button');
      prevBtn.textContent = '‚¨Ö Prev';
      prevBtn.onclick = () => {
        if (currentPage > 1) {
          currentPage--;
          updateResults();
        }
      };

      const nextBtn = document.createElement('button');
      nextBtn.textContent = 'Next ‚û°';
      nextBtn.onclick = () => {
        currentPage++;
        updateResults();
      };

      const pageLabel = document.createElement('span');
      pageLabel.textContent = `Page ${currentPage}`;

      paginationContainer.appendChild(prevBtn);
      paginationContainer.appendChild(pageLabel);
      paginationContainer.appendChild(nextBtn);
    }

    window.addEventListener('DOMContentLoaded', updateResults);
  </script>
</div>
